// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

// Derivative token for staked UBQT_B
contract stkUBQT_B is ERC20, Ownable {
    constructor() ERC20("Staked UBQT_B", "stkUBQT_B") {}

    function mint(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
    }

    function burn(address from, uint256 amount) external onlyOwner {
        _burn(from, amount);
    }
}

// Liquid staking pool with rewards and cooldown
contract UBQTBStaking is Ownable {
    IERC20 public ubqtb;
    stkUBQT_B public stkToken;

    uint256 public totalStaked;
    uint256 public rewardRatePerSecond = 1e16; // 0.01 UBQT_B per second
    uint256 public cooldownPeriod = 1 days;

    struct Staker {
        uint256 balance;
        uint256 rewardDebt;
        uint256 lastUpdateTime;
        uint256 cooldownEnd;
    }

    mapping(address => Staker) public stakers;

    constructor(address _ubqtb, address _stkToken) {
        ubqtb = IERC20(_ubqtb);
        stkToken = stkUBQT_B(_stkToken);
    }

    modifier updateRewards(address user) {
        Staker storage staker = stakers[user];
        if (staker.balance > 0) {
            uint256 duration = block.timestamp - staker.lastUpdateTime;
            staker.rewardDebt += duration * staker.balance * rewardRatePerSecond / 1e18;
        }
        staker.lastUpdateTime = block.timestamp;
        _;
    }

    function stake(uint256 amount) external updateRewards(msg.sender) {
        require(amount > 0, "Amount must be greater than 0");
        ubqtb.transferFrom(msg.sender, address(this), amount);

        totalStaked += amount;
        stakers[msg.sender].balance += amount;
        stakers[msg.sender].cooldownEnd = block.timestamp + cooldownPeriod;

        stkToken.mint(msg.sender, amount);
    }

    function unstake(uint256 amount) external updateRewards(msg.sender) {
        Staker storage staker = stakers[msg.sender];
        require(amount > 0, "Amount must be greater than 0");
        require(staker.balance >= amount, "Not enough staked");
        require(block.timestamp >= staker.cooldownEnd, "Cooldown period not met");

        stkToken.burn(msg.sender, amount);
        staker.balance -= amount;
        totalStaked -= amount;
        ubqtb.transfer(msg.sender, amount);
    }

    function claimRewards() external updateRewards(msg.sender) {
        uint256 reward = stakers[msg.sender].rewardDebt;
        require(reward > 0, "No rewards");
        stakers[msg.sender].rewardDebt = 0;
        ubqtb.transfer(msg.sender, reward);
    }

    function setRewardRate(uint256 _rate) external onlyOwner {
        rewardRatePerSecond = _rate;
    }

    function setCooldownPeriod(uint256 _period) external onlyOwner {
        cooldownPeriod = _period;
    }

    function recoverTokens(address token, uint256 amount) external onlyOwner {
        IERC20(token).transfer(owner(), amount);
    }

    // Frontend helper functions
    function getStakerInfo(address user) external view returns (uint256 balance, uint256 reward, uint256 cooldownEnd) {
        Staker storage staker = stakers[user];
        uint256 duration = block.timestamp - staker.lastUpdateTime;
        uint256 pendingReward = staker.rewardDebt + duration * staker.balance * rewardRatePerSecond / 1e18;
        return (staker.balance, pendingReward, staker.cooldownEnd);
    }
}
